üìå Resumen Completo del Bot para Replit (Versi√≥n Profesional y Automatizada)

üèÜ Objetivo del Bot

Este bot de Telegram es una herramienta de moderaci√≥n profesional compatible con GroupHelp y BotFader. Est√° dise√±ado para grupos grandes (+7,000 miembros), con el prop√≥sito de automatizar la vigilancia de los perfiles de los usuarios y aplicar sanciones en caso de incumplimiento de las normas del grupo.

üéØ Funciones del Bot
	1.	Monitoreo autom√°tico de usuarios:
	‚Ä¢	Detecta si un usuario elimina o pone privada su foto de perfil.
	‚Ä¢	Detecta si un usuario cambia su @username.
	2.	Advertencias autom√°ticas con mensajes profesionales:
	‚Ä¢	El bot env√≠a un mensaje formal mencionando al usuario con una advertencia.
	‚Ä¢	Se otorgan 5 minutos para corregir el perfil.
	3.	Expulsi√≥n autom√°tica con /kick @username motivo:
	‚Ä¢	Si el usuario no revierte el cambio, el bot lo expulsa autom√°ticamente.
	‚Ä¢	Elimina la advertencia despu√©s de la acci√≥n.
	4.	Registro de eventos en la base de datos:
	‚Ä¢	Se almacena fecha, ID, username y motivo en un registro de actividad.
	5.	Mensajes estructurados y profesionales:
	‚Ä¢	Lenguaje claro y formal para evitar malentendidos.
	6.	Webhooks eficientes para Replit:
	‚Ä¢	Evita sobrecarga de recursos y permite respuestas r√°pidas.
	7.	Auto-reconexi√≥n en caso de apagado en Replit.

üóÇÔ∏è Estructura del Proyecto

üìÇ telegram_bot/
‚îú‚îÄ‚îÄ üìú config.py ‚Üí Configuraci√≥n del bot (token, webhook, API, etc.)
‚îú‚îÄ‚îÄ üìú bot.py ‚Üí C√≥digo principal (manejo de eventos y webhooks)
‚îú‚îÄ‚îÄ üìú handlers.py ‚Üí Detecci√≥n de cambios y aplicaci√≥n de sanciones
‚îú‚îÄ‚îÄ üìú database.py ‚Üí Base de datos SQLite para registros de advertencias y expulsiones
‚îú‚îÄ‚îÄ üìú requirements.txt ‚Üí Librer√≠as necesarias (aiogram, sqlite3)

üìú C√≥digo Base con Mensajes Profesionales y Automatizaci√≥n Completa

üîπ 1. Configuraci√≥n del bot (config.py)

TOKEN = "TU_TOKEN_AQUI"
WEBHOOK_URL = "https://tu-servidor.com/webhook"
WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = 8000
ADMIN_CHAT_ID = 123456789  # ID del grupo de administradores

üîπ 2. C√≥digo Principal (bot.py)

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from config import TOKEN, WEBHOOK_URL, WEBHOOK_PATH, WEBAPP_HOST, WEBAPP_PORT
from handlers import handle_profile_change, handle_username_change

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

async def on_startup(_):
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info("‚úÖ Webhook configurado correctamente.")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è Error configurando el Webhook: {e}")
        asyncio.create_task(retry_webhook())

async def retry_webhook():
    await asyncio.sleep(10)
    await on_startup(None)

async def on_shutdown(_):
    await bot.delete_webhook()
    logging.info("‚ö†Ô∏è Bot apagado correctamente.")

dp.register_message_handler(handle_profile_change, content_types=types.ContentType.NEW_CHAT_MEMBERS)
dp.register_message_handler(handle_username_change, content_types=types.ContentType.NEW_CHAT_MEMBERS)

if __name__ == '__main__':
    start_webhook(dispatcher=dp, webhook_path=WEBHOOK_PATH,
                  on_startup=on_startup, on_shutdown=on_shutdown,
                  host=WEBAPP_HOST, port=WEBAPP_PORT)

üîπ 3. Manejo de Advertencias y Expulsi√≥n (handlers.py)

import asyncio
import logging
from aiogram import types
from database import save_warning, remove_warning, log_event
from config import ADMIN_CHAT_ID

async def handle_profile_change(message: types.Message):
    user = message.from_user
    user_id = user.id
    chat_id = message.chat.id

    # Simulaci√≥n de detecci√≥n (reemplazar con API real de Telegram)
    profile_photo_exists = False  # Cambiar a True si tiene foto

    if not profile_photo_exists:
        warning_msg = await message.answer(
            f"‚ö†Ô∏è Estimado @{user.username}, hemos detectado que has eliminado tu foto de perfil.\n"
            "Por favor, rest√°urala en un plazo de **5 minutos** para evitar sanciones."
        )

        save_warning(user_id, warning_msg.message_id)
        log_event(user_id, "Foto de perfil eliminada", chat_id)

        asyncio.create_task(schedule_kick(user_id, user.username, chat_id, warning_msg))
        
async def schedule_kick(user_id, username, chat_id, warning_msg):
    await asyncio.sleep(300)  
    if remove_warning(user_id):  
        await bot.send_message(chat_id, f"üö® @{username} ha sido **expulsado** por no revertir su cambio en 5 minutos.")
        await bot.send_message(chat_id, f"/kick @{username} No ha revertido su cambio en 5 minutos.")
        log_event(user_id, "Expulsado por no revertir cambio", chat_id)
        await warning_msg.delete()

üîπ 4. Base de Datos con Registros (database.py)

import sqlite3

conn = sqlite3.connect("bot_data.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS warnings (
    user_id INTEGER PRIMARY KEY,
    message_id INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    event TEXT,
    chat_id INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

def save_warning(user_id, message_id):
    cursor.execute("INSERT OR REPLACE INTO warnings (user_id, message_id) VALUES (?, ?)", (user_id, message_id))
    conn.commit()

def remove_warning(user_id):
    cursor.execute("DELETE FROM warnings WHERE user_id = ?", (user_id,))
    conn.commit()
    return cursor.rowcount > 0

def log_event(user_id, event, chat_id):
    cursor.execute("INSERT INTO logs (user_id, event, chat_id) VALUES (?, ?, ?)", (user_id, event, chat_id))
    conn.commit()

üîπ 5. Requisitos (requirements.txt)

aiogram
sqlite3
asyncio
logging

üöÄ Explicaci√≥n para Replit

Este bot usa aiogram con Webhooks para manejar eventos en Telegram de manera eficiente y automatizada.
	1.	C√≥mo funciona:
	‚Ä¢	Detecta cambios en la foto de perfil o @username.
	‚Ä¢	Env√≠a un mensaje autom√°tico de advertencia mencionando al usuario.
	‚Ä¢	Si el usuario no revierte el cambio en 5 minutos, ejecuta /kick @username motivo.
	‚Ä¢	Elimina el mensaje de advertencia despu√©s de la acci√≥n.
	‚Ä¢	Guarda los eventos en la base de datos.
	2.	C√≥mo ejecutarlo en Replit:
	‚Ä¢	Sube el c√≥digo a Replit.
	‚Ä¢	Instala las dependencias (pip install -r requirements.txt).
	‚Ä¢	Configura el TOKEN de Telegram en config.py.
	‚Ä¢	Inicia el bot (python bot.py).