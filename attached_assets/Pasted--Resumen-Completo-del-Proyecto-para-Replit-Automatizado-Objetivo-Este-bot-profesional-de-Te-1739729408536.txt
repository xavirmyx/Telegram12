📌 Resumen Completo del Proyecto para Replit (Automatizado)

🏆 Objetivo

Este bot profesional de Telegram funciona con GroupHelp y BotFader para moderar grupos de más de 7,000 miembros, detectando y expulsando automáticamente a los usuarios que:
	1.	Se quiten la foto de perfil o la cambien a privada.
	2.	Modifiquen su @username.

🔹 Flujo de Trabajo Automatizado
	1.	Detecta cambios en la foto de perfil o @username.
	2.	Envía una advertencia automática mencionando al usuario, dándole 5 minutos para revertir el cambio.
	3.	Si no revierte el cambio, el bot ejecuta /kick @username motivo.
	4.	Elimina el mensaje de advertencia una vez que el bot actúe.
	5.	Registra eventos en la base de datos (ID, fecha, hora y tipo de cambio).

🗂️ Estructura del Proyecto

📂 telegram_bot/
├── 📜 config.py → Configuración del bot (token, API, Webhook, etc.)
├── 📜 bot.py → Código principal (manejo de eventos y webhooks)
├── 📜 handlers.py → Detección de cambios y aplicación de sanciones
├── 📜 database.py → Base de datos SQLite para registros
├── 📜 requirements.txt → Librerías necesarias (aiogram, sqlite3)

📝 Código Base (Automatizado y Sin Botones)

🔹 1. Configuración del bot (config.py)

TOKEN = "TU_TOKEN_AQUI"
WEBHOOK_URL = "https://tu-servidor.com/webhook"
WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = 8000

🔹 2. Código Principal (bot.py)

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from config import TOKEN, WEBHOOK_URL, WEBHOOK_PATH, WEBAPP_HOST, WEBAPP_PORT
from handlers import handle_profile_change, handle_username_change

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

async def on_startup(_):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("Bot iniciado y Webhook configurado.")

async def on_shutdown(_):
    await bot.delete_webhook()
    logging.info("Bot apagado.")

dp.register_message_handler(handle_profile_change, content_types=types.ContentType.NEW_CHAT_MEMBERS)
dp.register_message_handler(handle_username_change, content_types=types.ContentType.NEW_CHAT_MEMBERS)

if __name__ == '__main__':
    start_webhook(dispatcher=dp, webhook_path=WEBHOOK_PATH,
                  on_startup=on_startup, on_shutdown=on_shutdown,
                  host=WEBAPP_HOST, port=WEBAPP_PORT)

🔹 3. Detección de Cambios y Expulsión (handlers.py)

import asyncio
import logging
from aiogram import types
from database import save_warning, remove_warning, log_event

async def handle_profile_change(message: types.Message):
    user = message.from_user
    user_id = user.id
    chat_id = message.chat.id

    # Simulación de detección (reemplazar con API real de Telegram)
    profile_photo_exists = False  # Cambiar a True si tiene foto

    if not profile_photo_exists:
        warning_msg = await message.answer(
            f"⚠️ @{user.username}, has quitado su foto de perfil.\n"
            "Tienes 5 minutos para revertirlo o serás expulsado."
        )

        save_warning(user_id, warning_msg.message_id)
        log_event(user_id, "Foto de perfil eliminada", chat_id)

        await asyncio.sleep(300)  # Esperar 5 minutos
        if remove_warning(user_id):
            await message.chat.kick(user_id)  # Expulsar usuario
            await message.answer(f"/kick @{user.username} No ha revertido su cambio en 5 minutos.")
            log_event(user_id, "Expulsado por no revertir cambio", chat_id)
            await warning_msg.delete()  # Eliminar advertencia

🔹 4. Base de Datos con Registros (database.py)

import sqlite3

conn = sqlite3.connect("bot_data.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS warnings (
    user_id INTEGER PRIMARY KEY,
    message_id INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    event TEXT,
    chat_id INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

def save_warning(user_id, message_id):
    cursor.execute("INSERT OR REPLACE INTO warnings (user_id, message_id) VALUES (?, ?)", (user_id, message_id))
    conn.commit()

def remove_warning(user_id):
    cursor.execute("DELETE FROM warnings WHERE user_id = ?", (user_id,))
    conn.commit()
    return cursor.rowcount > 0

def log_event(user_id, event, chat_id):
    cursor.execute("INSERT INTO logs (user_id, event, chat_id) VALUES (?, ?, ?)", (user_id, event, chat_id))
    conn.commit()

🔹 5. Requisitos (requirements.txt)

aiogram
sqlite3
asyncio
logging

🚀 Explicación para Replit

Este bot usa aiogram con Webhooks para manejar eventos en Telegram de manera eficiente y automatizada.
	1.	Cómo funciona:
	•	Detecta cambios en la foto de perfil o @username.
	•	Envía un mensaje automático de advertencia mencionando al usuario.
	•	Si el usuario no revierte el cambio en 5 minutos, ejecuta /kick @username motivo.
	•	Elimina el mensaje de advertencia después de la acción.
	•	Guarda los eventos en la base de datos.
	2.	Cómo ejecutarlo en Replit:
	•	Sube el código a Replit.
	•	Instala las dependencias (pip install -r requirements.txt).
	•	Configura el TOKEN de Telegram en config.py.
	•	Inicia el bot (python bot.py).

🔥 Siguientes Pasos

a. ¿Quieres que el bot guarde un historial de todas las expulsiones con razón y fecha?
b. ¿Necesitas integración con una API externa para reportes avanzados?